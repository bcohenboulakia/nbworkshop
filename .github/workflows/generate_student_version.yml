# This file is part of nbworkshop.
# 
# nbworkshop is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published by
# the Free Software Foundation.
# 
# nbworkshop is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with nbworkshop. If not, see <https://www.gnu.org/licenses/>.

name: Generate Students Branch

on:
  push:
    branches: [main]
    paths: ['**.ipynb']
  workflow_dispatch:
  
permissions:
  contents: write
  
jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        # For HTML tag manipulation in Markdown cells
        run: pip install beautifulsoup4

      # Every monitored directory is copied structure-wise in order to replace tutor notebooks
      # without deleting other materials
      - name: Prepare temp directory
        run: |
          rm -rf /tmp/processed
          mkdir -p /tmp/processed
          for dir in $(jq -r '.notebooks_dir[]' .github/config.json); do
            cp -r --parents "$dir" /tmp/processed/
          done

      - name: Initialize summary
        run: |
          echo "## Processing Report" >> $GITHUB_STEP_SUMMARY
          echo "| Notebook | Questions | Code Blocks | ZIP |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-----------|-------------|-----|" >> $GITHUB_STEP_SUMMARY
      
      # Conversion is done on the copied notebooks
      - name: Convert notebooks
        # Standard output of successive conversions are added directly to GitHub step summary
        run: |
          TEMP_OUTPUT=$(mktemp)
          find /tmp/processed -name '*.ipynb' | while read -r nb; do
            python .github/scripts/student_version.py "$nb" \
              --config .github/config.json \
              --hide-header >> "$TEMP_OUTPUT"
            rm "$nb"
          done
          # Remove "/tmp/processed/" from the paths
          sed 's|/tmp/processed/||g' "$TEMP_OUTPUT" >> $GITHUB_STEP_SUMMARY
          rm "$TEMP_OUTPUT"

      # It the Students branche doens't exist, it is created first
      - name: Switch to Students branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git show-ref --verify --quiet refs/heads/Students; then
            git checkout Students
          else
            git checkout --orphan Students
            git commit --allow-empty -m "Initial commit"
          fi

      - name: Clean existing files
        run: |
          for dir in $(jq -r '.notebooks_dir[]' .github/config.json); do
            rm -rf "$dir"
          done

      - name: Sync processed files
        run: |
          cp -a /tmp/processed/* .

      - name: Commit and push
        run: |
          git add .
          git commit -m "Update student materials: $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes"
          git push origin Students --force
      
      # In order to collect standard and error output from the post-command execution,
      # temporary files are created
      - name: Execute post-command
        - name: Execute post-command
          run: |
          echo "## Post-command Results" >> $GITHUB_STEP_SUMMARY
          
          POST_COMMAND=$(jq -r '.post_command // empty' .github/config.json)
          if [ -n "$POST_COMMAND" ]; then
              echo "### Executed Command" >> $GITHUB_STEP_SUMMARY
              echo '```
              echo "$POST_COMMAND" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              
              # Execute the command and capture both stdout and stderr
              OUTPUT_FILE=$(mktemp)
              ERROR_FILE=$(mktemp)
              
              echo "Executing post-command: $POST_COMMAND"
              if bash -c "$POST_COMMAND" > "$OUTPUT_FILE" 2> "$ERROR_FILE"; then
              # Command executed successfully
              echo "### Execution Status" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Success**" >> $GITHUB_STEP_SUMMARY
              
              # Add standard output if it exists
              if [ -s "$OUTPUT_FILE" ]; then
                  echo "### Standard Output" >> $GITHUB_STEP_SUMMARY
                  echo '```
                  cat "$OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
              else
                  echo "### Standard Output" >> $GITHUB_STEP_SUMMARY
                  echo "_No standard output_" >> $GITHUB_STEP_SUMMARY
              fi
              else
              # Command failed
              EXIT_CODE=$?
              echo "### Execution Status" >> $GITHUB_STEP_SUMMARY
              echo "❌ **Failed** (exit code: $EXIT_CODE)" >> $GITHUB_STEP_SUMMARY
              
              # Add standard output if it exists
              if [ -s "$OUTPUT_FILE" ]; then
                  echo "### Standard Output" >> $GITHUB_STEP_SUMMARY
                  echo '```
                  cat "$OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
              else
                  echo "### Standard Output" >> $GITHUB_STEP_SUMMARY
                  echo "_No standard output_" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Add error output if it exists
              if [ -s "$ERROR_FILE" ]; then
                  echo "### Standard Error Output" >> $GITHUB_STEP_SUMMARY
                  echo '```
                  cat "$ERROR_FILE" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
              else
                  echo "### Standard Error Output" >> $GITHUB_STEP_SUMMARY
                  echo "_No error output_" >> $GITHUB_STEP_SUMMARY
              fi
              fi
              
              # Clean up temporary files
              rm "$OUTPUT_FILE" "$ERROR_FILE"
          else
              echo "### Information" >> $GITHUB_STEP_SUMMARY
              echo "_No post-command to execute_" >> $GITHUB_STEP_SUMMARY
          fi
          shell: bash
