name: Generate Students Notebooks branch

on:
  push:
    branches: [main]
    paths: ['**.ipynb']
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  process:
    runs-on: ubuntu-latest
    env:
      CONFIG_PATH: .github/conversion.json
      SUMMARY_FILE: ${{ runner.temp }}/summary.md

    steps:
      - name: Initialize summary file
        run: |
          mkdir -p "$(dirname "$SUMMARY_FILE")"
          echo "## Processing Report" > "$SUMMARY_FILE"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Validate JSON config and extract values
        id: validate-config
        run: |
          # V√©rification syntaxique basique
          if ! jq empty "$CONFIG_PATH" >/dev/null 2>&1; then
            echo "::error::Invalid JSON syntax in $CONFIG_PATH"
            jq empty "$CONFIG_PATH" 2>&1
            exit 1
          fi

          # Installation minimale d'Ajv
          npm install ajv@8

          # Validation avec sch√©ma int√©gr√©
          node - <<EOF
          const fs = require('fs');
          const Ajv = require('ajv').default;
          
          const schema = {
            type: 'object',
            required: [
              'solution_marker', 
              'placeholder', 
              'generate_zip', 
              'notebooks_dir', 
              'student_postfix', 
              'tutor_postfix'
            ],
            properties: {
              solution_marker: {
                type: 'object',
                required: ['code', 'markdown'],
                properties: {
                  code: {type: 'string'},
                  markdown: {type: 'string'}
                },
                additionalProperties: false
              },
              placeholder: {
                type: 'object',
                required: ['code', 'markdown'],
                properties: {
                  code: {type: 'string'},
                  markdown: {type: 'string'}
                },
                additionalProperties: false
              },
              generate_zip: {type: 'boolean'},
              notebooks_dir: {
                type: 'array',
                items: {type: 'string'},
                minItems: 1
              },
              pre_processing: {type: 'string'},
              post_processing: {type: 'string'},
              tutor_postfix: {type: 'string'},
              student_postfix: {type: 'string'},
              rebuild_all: {type: 'boolean'}
            }
          };
          
          try {
            const config = JSON.parse(fs.readFileSync('$CONFIG_PATH'));
            const ajv = new Ajv({allErrors: true, strict: true});
            const validate = ajv.compile(schema);
            
            if (!validate(config)) {
              console.error('::error::Config validation failed:');
              validate.errors.forEach(err => {
                console.error(`  ${err.instancePath} ${err.message}`);
              });
              process.exit(1);
            }
            
            // Exporter les valeurs
            const outputs = [
              `pre_processing=${config.pre_processing || ''}`,
              `post_processing=${config.post_processing || ''}`,
              `rebuild_all=${config.rebuild_all || false}`
            ];
            
            fs.appendFileSync(process.env.GITHUB_OUTPUT, outputs.join('\n'));
            
          } catch (error) {
            console.error('::error::' + error.message);
            process.exit(1);
          }
          EOF

      - name: Check monitored directories existence
        run: |
          EXIT_WITH_ERROR=false
          while IFS= read -r dir; do
            if [ ! -d "$dir" ]; then
              if [ "$EXIT_WITH_ERROR" = false ]; then
                echo "## ‚ùå Error: Missing notebook directories" >> $SUMMARY_FILE
                echo "The following directories don't exist:" >> $SUMMARY_FILE
                EXIT_WITH_ERROR=true
              fi
              echo "- \`$dir\`" >> $SUMMARY_FILE
            fi
          done < <(jq -r '.notebooks_dir[]' "$CONFIG_PATH")
          
          if [ "$EXIT_WITH_ERROR" = true ]; then
            echo "Please create these directories or update the configuration." >> $SUMMARY_FILE
            exit 1
          fi

      - name: Validate pre/post-processing commands syntax
        run: |
          PRE_PROCESSING="${{ steps.validate-config.outputs.pre_processing }}"
          POST_PROCESSING="${{ steps.validate-config.outputs.post_processing }}"
          
          if [ -n "$PRE_PROCESSING" ]; then
            if ! bash -n <<< "$PRE_PROCESSING"; then
              echo "::error::Pre-processing command syntax error"
              echo "## ‚ùå Pre-processing syntax error" >> $SUMMARY_FILE
              echo "Invalid syntax: \`$PRE_PROCESSING\`" >> $SUMMARY_FILE
              exit 1
            fi
          fi
          
          if [ -n "$POST_PROCESSING" ]; then
            if ! bash -n <<< "$POST_PROCESSING"; then
              echo "::error::Post-processing command syntax error"
              echo "## ‚ùå Post-processing syntax error" >> $SUMMARY_FILE
              echo "Invalid syntax: \`$POST_PROCESSING\`" >> $SUMMARY_FILE
              exit 1
            fi
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Manage Students branch
        run: |
          git fetch origin Students || true
          if git show-ref --verify --quiet refs/remotes/origin/Students; then
            git checkout Students
            git merge main --strategy-option theirs -m "Merge main into Students"
          else
            git checkout -b Students
          fi

      - name: Execute pre-processing command
        if: ${{ steps.validate-config.outputs.pre_processing != '' }}
        run: |
          PRE_PROCESSING="${{ steps.validate-config.outputs.pre_processing }}"
          echo "## üöÄ Running pre-processing" >> $SUMMARY_FILE
          echo "\`\`\`bash" >> $SUMMARY_FILE
          bash -c "$PRE_PROCESSING" 2>&1 | tee -a $SUMMARY_FILE
          EXIT_CODE=$?
          echo "\`\`\`" >> $SUMMARY_FILE
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Pre-processing failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Detect notebooks to process
        id: notebooks
        run: |
          REBUILD_ALL="${{ steps.validate-config.outputs.rebuild_all }}"
          mapfile -t notebooks_dirs < <(jq -r '.notebooks_dir[]' "$CONFIG_PATH")
          
          NOTEBOOKS_LIST="notebooks_to_process.txt"
          > $NOTEBOOKS_LIST

          if [ "$REBUILD_ALL" = "true" ]; then
            for dir in "${notebooks_dirs[@]}"; do
              find "$dir" -type f -name "*.ipynb"
            done | sort -u > $NOTEBOOKS_LIST
          else
            git diff --name-only --diff-filter=ACMRT origin/main...HEAD > changed_files.txt
            while IFS= read -r f; do
              for d in "${notebooks_dirs[@]}"; do
                d="${d%/}"
                if { [[ "$f" == "$d" ]] || [[ "$f" == "$d/"* ]]; } && [[ "$f" == *.ipynb ]];  then
                  echo "$f" >> $NOTEBOOKS_LIST
                  break
                fi
              done
            done < changed_files.txt
            sort -u $NOTEBOOKS_LIST -o $NOTEBOOKS_LIST
          fi
          
          echo "notebooks_list=$NOTEBOOKS_LIST" >> $GITHUB_OUTPUT

      - name: Convert notebooks
        run: |
          echo "## üìì Notebooks processed" >> $SUMMARY_FILE
          echo "| Notebook | Questions | Code Blocks | ZIP | Conflicts |" >> $SUMMARY_FILE
          echo "|----------|-----------|-------------|-----|-----------|" >> $SUMMARY_FILE
          
          NOTEBOOKS_LIST="${{ steps.notebooks.outputs.notebooks_list }}"
          REBUILD_ALL="${{ steps.validate-config.outputs.rebuild_all }}"
          
          while IFS= read -r nb; do
            [ -z "$nb" ] && continue
            SUMMARY_LINE=$(python .github/scripts/student_version.py "$nb" --config "$CONFIG_PATH" --hide-header)
            git add "$nb"
            echo "$SUMMARY_LINE | " >> $SUMMARY_FILE
          done < "$NOTEBOOKS_LIST"

      - name: Execute post-processing command
        if: ${{ steps.validate-config.outputs.post_processing != '' }}
        run: |
          POST_PROCESSING="${{ steps.validate-config.outputs.post_processing }}"
          echo "## üöÄ Running post-processing" >> $SUMMARY_FILE
          echo "\`\`\`bash" >> $SUMMARY_FILE
          bash -c "$POST_PROCESSING" 2>&1 | tee -a $SUMMARY_FILE
          EXIT_CODE=$?
          echo "\`\`\`" >> $SUMMARY_FILE
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Post-processing failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Finalize summary
        run: |
          cat "$SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY

      - name: Commit and push
        run: |
          git add .
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "Update student materials: $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin Students
          fi