# This file is part of nbworkshop.
# 
# nbworkshop is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published by
# the Free Software Foundation.
# 
# nbworkshop is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with nbworkshop. If not, see <https://www.gnu.org/licenses/>.

name: Generate Students Notebooks branch

on:
  push:
    branches: [main]
    paths: ['**.ipynb']
  workflow_dispatch:
  
permissions:
  contents: write
  actions: write # Permission to trigger other workflows. Not used by the workflow,
                 # but could useful if the user defined post-processing command must
                 # run another workflow

jobs:
  process:
    runs-on: ubuntu-latest
    env:
      CONFIG_PATH: .github/conversion.json
      SUMMARY_FILE: /tmp/processed/README.md
    
    steps:
      - name: Initialize summary file
        run: |
          # Prepare README.md to be commited on Students branch
          rm -f "$SUMMARY_FILE"
          mkdir -p "$(dirname "$SUMMARY_FILE")"
          
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Validate JSON config file syntax
        run: |
          # Check basic JSON syntax
          if ! jq empty "$CONFIG_PATH" 2>/tmp/json_error; then
            printf "## ❌ Error in JSON configuration file\n" >> $SUMMARY_FILE
            printf "Please fix $CONFIG_PATH error:\n" >> $SUMMARY_FILE
            cat /tmp/json_error | sed 's/^jq: //' >> $SUMMARY_FILE
            exit 1
          fi

      - name: Validate JSON config file against config schema
        run: |
          cat > /tmp/schema.json << 'EOF'
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": ["solution_marker", "placeholder", "generate_zip", "notebooks_dir", "student_postfix", "tutor_postfix"],
            "properties": {
              "solution_marker": {
                "type": "object",
                "required": ["code", "markdown"],
                "properties": {
                  "code": {"type": "string"},
                  "markdown": {"type": "string"}
                },
                "additionalProperties": false
              },
              "placeholder": {
                "type": "object",
                "required": ["code", "markdown"],
                "properties": {
                  "code": {"type": "string"},
                  "markdown": {"type": "string"}
                },
                "additionalProperties": false
              },
              "generate_zip": {"type": "boolean"},
              "notebooks_dir": {"type": "array", "items": {"type": "string"}},
              "pre_processing": {"type": "string"},
              "post_processing": {"type": "string"},
              "tutor_postfix": {"type": "string"},
              "student_postfix": {"type": "string"}
            }
          }
          EOF
        
          # Check against configuration schema 
          npm install -g @jirutka/ajv-cli
          if ! ajv validate -s /tmp/schema.json "$CONFIG_PATH" --strict=true --all-errors > /tmp/json_error 2>&1 ; then
            printf "## ❌ Error in JSON configuration file\n" >> $SUMMARY_FILE
            cat /tmp/json_error | sed 's/^ajv: //' >> $SUMMARY_FILE
            exit 1
          fi

      - name: Check monitored directories existence
        run: |
          # Initialize error flag
          EXIT_WITH_ERROR=false
          ERROR_HEADER_CREATED=false
          
          # Read directories from config file and check existence
          while IFS= read -r dir; do
            if [ ! -d "$dir" ]; then
              # First error needs to create the header
              if [ "$ERROR_HEADER_CREATED" = false ]; then
                printf "## ❌ Error: Missing notebook directories\n" >> $SUMMARY_FILE
                printf "The following directories specified in $CONFIG_PATH don't exist:\n" >> $SUMMARY_FILE
                ERROR_HEADER_CREATED=true
              fi
              
              # List the missing directory in the error message
              printf -- "* \`\`\`%s\`\`\`\n" "$dir" >> $SUMMARY_FILE
              EXIT_WITH_ERROR=true
            fi
          done < <(jq -r '.notebooks_dir[]' "$CONFIG_PATH")
          
          # If error found, close the code block and exit with error
          if [ "$EXIT_WITH_ERROR" = true ]; then
            printf "\nPlease create these directories or update the configuration file.\n" >> $SUMMARY_FILE
            exit 1
          fi
          
      # Retrieve the pre and post-process command from the config file. This must be done
      # at the beginning of the workflow specifically for the post-processing command, because
      # the Students branch is cleaned after notebook generation, which also makes conversion.json unavailable
      - name: Store pre and post-processing command for future execution
        run: |
          echo "PRE_PROCESSING=$(jq -r '.pre_processing // empty' "$CONFIG_PATH")" >> $GITHUB_ENV
          echo "POST_PROCESSING=$(jq -r '.post_processing // empty' "$CONFIG_PATH")" >> $GITHUB_ENV
          
      - name: Check pre/post-processing commands syntax
        run: |
          # Verify pre-processing command syntax if defined
          if [ -n "$PRE_PROCESSING" ]; then
            ERROR_OUTPUT=$(echo "$PRE_PROCESSING" | bash -n 2>&1) || {
              # Syntax error found
              printf "## ❌ Error: Pre-processing command syntax error\n" >> $SUMMARY_FILE
              printf "Please fix your pre-processing command syntax:\n" >> $SUMMARY_FILE
              printf "\`\`\`\n" >> $SUMMARY_FILE
              printf "%s\n" "$PRE_PROCESSING" >> $SUMMARY_FILE
              printf "\`\`\`\n\n" >> $SUMMARY_FILE
              printf "**Error details:**\n" >> $SUMMARY_FILE
              printf "\`\`\`\n" >> $SUMMARY_FILE
              printf "%s\n" "$ERROR_OUTPUT" >> $SUMMARY_FILE
              printf "\`\`\`\n" >> $SUMMARY_FILE
              exit 1
            }
          fi
          
          # Verify post-processing command syntax if defined
          if [ -n "$POST_PROCESSING" ]; then
            ERROR_OUTPUT=$(echo "$POST_PROCESSING" | bash -n 2>&1) || {
              # Syntax error found
              printf "## ❌ Error: Post-processing command syntax error\n" >> $SUMMARY_FILE
              printf "Please fix your post-processing command syntax:\n" >> $SUMMARY_FILE
              printf "\`\`\`\n" >> $SUMMARY_FILE
              printf "%s\n" "$POST_PROCESSING" >> $SUMMARY_FILE
              printf "\`\`\`\n\n" >> $SUMMARY_FILE
              printf "**Error details:**\n" >> $SUMMARY_FILE
              printf "\`\`\`\n" >> $SUMMARY_FILE
              printf "%s\n" "$ERROR_OUTPUT" >> $SUMMARY_FILE
              printf "\`\`\`\n" >> $SUMMARY_FILE
              exit 1
            }
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Uses uv in order to extract dependencies and leverage cache
      # between workflow executions (following PEP 723)
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: ".github/scripts/student_version.py"

      # Execution of the pre-processing command, if defined, with summary update
      - name: Execute pre-processing command
        run: |
              # Execute the command and capture output (stdout and stderr combined)
              OUTPUT=$(bash -c "$PRE_PROCESSING" 2>&1)
              EXIT_CODE=$?
              
              if [ $EXIT_CODE -eq 0 ]; then
                  # Command executed successfully
                  printf "## Pre-processing executed successfully ✅\n" >> $SUMMARY_FILE
                  
                  # Add output if it exists
                  if [ -n "$OUTPUT" ]; then
                      printf "%s\n" "$OUTPUT" >> $SUMMARY_FILE
                  else
                      printf "\n" >> $SUMMARY_FILE
                  fi
              else
                  # Command failed
                  printf "## Post-processing failed ❌\n" >> $SUMMARY_FILE
                  printf "Code de sortie: %d\n" "$EXIT_CODE" >> $SUMMARY_FILE
                  
                  # Add output if it exists (will contain both stdout and stderr)
                  if [ -n "$OUTPUT" ]; then
                      printf "\n" >> $SUMMARY_FILE
                      printf "Sortie de commande (incluant les erreurs):\n" >> $SUMMARY_FILE
                      printf "\`\`\`bash\n" >> $SUMMARY_FILE
                      printf "%s\n" "$OUTPUT" >> $SUMMARY_FILE
                      printf "\`\`\`\n" >> $SUMMARY_FILE
                  fi
              fi
          
      # Every monitored directory is copied structure-wise in order to replace tutor notebooks
      # without deleting other materials
      - name: Prepare temp directory used for notebooks conversion
        run: |
          rm -rf /tmp/processed
          mkdir -p /tmp/processed
          jq -r '.notebooks_dir[]' "$CONFIG_PATH" | while IFS= read -r dir; do
            cp -r --parents "$dir" /tmp/processed/
          done
      
      # Conversion is done on the copied notebooks
      - name: Convert notebooks
        run: |
          # Generate summary table in Markdown format
          printf "## Notebook processed\n" >> $SUMMARY_FILE
          printf "| Notebook | Questions | Code Blocks | ZIP |\n" >> $SUMMARY_FILE
          printf "|----------|-----------|-------------|-----|\n" >> $SUMMARY_FILE

          # Run python conversion script on each notebook to be converted through uv in order
          # to manage packages automatically. Standard output of successive conversions are
          # added directly to GitHub step summary
          find /tmp/processed -name "*.ipynb" -print0 | while IFS= read -d '' -r nb; do
            uv run .github/scripts/student_version.py "$nb" \
              --config "$CONFIG_PATH" \
              --hide-header | sed 's|/tmp/processed/||g' >> $SUMMARY_FILE
            rm "$nb"
          done


      # Reset the whole Students branch
      - name: Reset Students branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git show-ref --verify --quiet refs/heads/Students; then
            git branch -D Students
          fi
          git checkout --orphan Students
          git reset --hard
      
      # Syncing processed files in Students branch
      - name: Sync processed files
        run: |
          cp -a /tmp/processed/. .
      
      # The Students branch update is overwritten with the new content
      - name: Commit and push
        run: |
          git add .
          git commit -m "Update student materials: $(date +'%Y-%m-%d %H:%M:%S')" || printf "No changes\n"
          git push origin Students --force
      
      # Execution of the post-processing command, if defined, with summary update
      - name: Execute post-processing command
        run: |
          if [ -n "$POST_PROCESSING" ]; then
              # Execute the command and capture output (stdout and stderr combined)
              OUTPUT=$(bash -c "$POST_PROCESSING" 2>&1)
              EXIT_CODE=$?
              
              if [ $EXIT_CODE -eq 0 ]; then
                  # Command executed successfully
                  printf "## Post-processing executed successfully ✅\n" >> $SUMMARY_FILE
                  
                  # Add output if it exists
                  if [ -n "$OUTPUT" ]; then
                      printf "%s\n" "$OUTPUT" >> $SUMMARY_FILE
                  else
                      printf "\n" >> $SUMMARY_FILE
                  fi
              else
                  # Command failed
                  printf "## Post-processing failed ❌\n" >> $SUMMARY_FILE
                  printf "Code de sortie: %d\n" "$EXIT_CODE" >> $SUMMARY_FILE
                  
                  # Add output if it exists (will contain both stdout and stderr)
                  if [ -n "$OUTPUT" ]; then
                      printf "\n" >> $SUMMARY_FILE
                      printf "Sortie de commande (incluant les erreurs):\n" >> $SUMMARY_FILE
                      printf "\`\`\`bash\n" >> $SUMMARY_FILE
                      printf "%s\n" "$OUTPUT" >> $SUMMARY_FILE
                      printf "\`\`\`\n" >> $SUMMARY_FILE
                  fi
              fi
          fi
          
      - name: Inject README.md into GitHub Step Summary
        run: |
          cat README.md >> $GITHUB_STEP_SUMMARY