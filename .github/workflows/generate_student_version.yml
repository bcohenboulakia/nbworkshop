# This file is part of nbworkshop.
# 
# nbworkshop is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published by
# the Free Software Foundation.
# 
# nbworkshop is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with nbworkshop. If not, see <https://www.gnu.org/licenses/>.

name: Generate Students Branch

on:
  push:
    branches: [main]
    paths: ['**.ipynb']
  workflow_dispatch:
  
permissions:
  contents: write
  
jobs:
  process:
    runs-on: ubuntu-latest
    env:
      CONFIG_PATH: .github/conversion.json
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Uses uv in order to extract dependencies and leverage cache
      # between workflow executions (following PEP 723)
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: ".github/scripts/student_version.py"

      # Every monitored directory is copied structure-wise in order to replace tutor notebooks
      # without deleting other materials
      - name: Prepare temp directory used for notebooks conversion
        run: |
          rm -rf /tmp/processed
          mkdir -p /tmp/processed
          jq -r '.notebooks_dir[]' "$CONFIG_PATH" | while IFS= read -r dir; do
            cp -r --parents "$dir" /tmp/processed/
          done
      
      # Retrieve the post-process command from the config file. This must be done
      # at the beginning of the workflow because the Students branch is cleaned after
      # notebook generation, which also makes conversion.json unavailable
      - name: Store post-processing command for future execution
        run: |
          POST_PROCESSING=$(jq -r '.post_processing // empty' "$CONFIG_PATH")
          
      # Conversion is done on the copied notebooks
      - name: Convert notebooks
        run: |
          # Generate summary table in Markdown format
          printf "## Notebook processed\n" >> $GITHUB_STEP_SUMMARY
          printf "| Notebook | Questions | Code Blocks | ZIP |\n" >> $GITHUB_STEP_SUMMARY
          printf "|----------|-----------|-------------|-----|\n" >> $GITHUB_STEP_SUMMARY

          # Run python conversion script on each notebook to be converted through uv in order
          # to manage packages automatically. Standard output of successive conversions are
          # added directly to GitHub step summary
          find /tmp/processed -name "*.ipynb" -print0 | while IFS= read -d '' -r nb; do
            uv run .github/scripts/student_version.py "$nb" \
              --config "$CONFIG_PATH" \
              --hide-header | sed 's|/tmp/processed/||g' >> $GITHUB_STEP_SUMMARY
            rm "$nb"
          done


      # Reset the whole Students branch
      - name: Reset Students branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git show-ref --verify --quiet refs/heads/Students; then
            git branch -D Students
          fi
          git checkout --orphan Students
          git reset --hard
      
      # Syncing processed files in Students branch
      - name: Sync processed files
        run: |
          cp -a /tmp/processed/. .
      
      # The Students branch update is overwritten with the new content
      - name: Commit and push
        run: |
          git add .
          git commit -m "Update student materials: $(date +'%Y-%m-%d %H:%M:%S')" || printf "No changes\n"
          git push origin Students --force
      
      # Execution of the post-processing command, if defined, with summary update
      - name: Execute post-processing command
        run: |
          if [ -n "$POST_PROCESSING" ]; then  
              # Basic validation to prevent command injection
              if echo "$POST_PROCESSING" | grep -qE '^(rm -rf|sudo|chmod -R|chown -R) '; then
                  printf "## Post-processing failed ❌\n" >> $GITHUB_STEP_SUMMARY
                  printf "Potentially dangerous command detected: \`%s\`\n" "$POST_PROCESSING" >> $GITHUB_STEP_SUMMARY
                  printf "For security reasons, certain commands are not allowed in post-processing.\n" >> $GITHUB_STEP_SUMMARY
                  exit 1
              fi
                  
              # Execute the command and capture output (stdout and stderr combined)
              OUTPUT=$(bash -c "$POST_PROCESSING" 2>&1)
              EXIT_CODE=$?
              
              if [ $EXIT_CODE -eq 0 ]; then
                  # Command executed successfully
                  printf "## Post-processing executed successfully ✅\n" >> $GITHUB_STEP_SUMMARY
                  
                  # Add output if it exists
                  if [ -n "$OUTPUT" ]; then
                      printf "\n" >> $GITHUB_STEP_SUMMARY
                      printf "Command output:\n" >> $GITHUB_STEP_SUMMARY
                      printf "\`\`\`\n" >> $GITHUB_STEP_SUMMARY
                      printf "%s\n" "$OUTPUT" >> $GITHUB_STEP_SUMMARY
                      printf "\`\`\`\n" >> $GITHUB_STEP_SUMMARY
                  else
                      printf "\n" >> $GITHUB_STEP_SUMMARY
                  fi
              else
                  # Command failed
                  printf "## Post-processing failed ❌\n" >> $GITHUB_STEP_SUMMARY
                  printf "Code de sortie: %d\n" "$EXIT_CODE" >> $GITHUB_STEP_SUMMARY
                  
                  # Add output if it exists (will contain both stdout and stderr)
                  if [ -n "$OUTPUT" ]; then
                      printf "\n" >> $GITHUB_STEP_SUMMARY
                      printf "Sortie de commande (incluant les erreurs):\n" >> $GITHUB_STEP_SUMMARY
                      printf "\`\`\`bash\n" >> $GITHUB_STEP_SUMMARY
                      printf "%s\n" "$OUTPUT" >> $GITHUB_STEP_SUMMARY
                      printf "\`\`\`\n" >> $GITHUB_STEP_SUMMARY
                  fi
              fi
          fi